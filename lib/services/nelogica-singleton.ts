// lib/services/nelogica-singleton.ts
import { NelogicaApiClient } from "./nelogica-api-client";

/**
 * Singleton para NelogicaApiClient - ETAPA 1 da otimiza√ß√£o
 *
 * PROBLEMA RESOLVIDO:
 * - M√∫ltiplas inst√¢ncias = m√∫ltiplos logins = desperd√≠cio de requests
 *
 * SOLU√á√ÉO:
 * - Uma inst√¢ncia global reutilizada
 * - Login feito apenas 1 vez por inst√¢ncia do servidor
 * - Economia estimada: 70-80% das requests de login
 */
export class NelogicaSingleton {
  private static instance: NelogicaApiClient | null = null;
  private static isInitializing: boolean = false;

  /**
   * Retorna a inst√¢ncia √∫nica do NelogicaApiClient
   * Thread-safe para evitar m√∫ltiplas inicializa√ß√µes simult√¢neas
   */
  public static async getInstance(): Promise<NelogicaApiClient> {
    // Se j√° temos uma inst√¢ncia, retorna ela
    if (this.instance) {
      console.log("üîÑ [NelogicaSingleton] Reutilizando inst√¢ncia existente");
      return this.instance;
    }

    // Se outro processo est√° inicializando, aguarda
    if (this.isInitializing) {
      console.log(
        "‚è≥ [NelogicaSingleton] Aguardando inicializa√ß√£o em andamento..."
      );

      // Aguarda at√© a inicializa√ß√£o terminar (m√°ximo 10 segundos)
      const maxWaitTime = 10000;
      const checkInterval = 100;
      let waited = 0;

      while (this.isInitializing && waited < maxWaitTime) {
        await new Promise((resolve) => setTimeout(resolve, checkInterval));
        waited += checkInterval;
      }

      if (this.instance) {
        return this.instance;
      }
    }

    // Marca que estamos inicializando
    this.isInitializing = true;

    try {
      console.log("üöÄ [NelogicaSingleton] Criando nova inst√¢ncia √∫nica");

      // Busca as configura√ß√µes do ambiente
      const apiUrl =
        process.env.NELOGICA_API_URL ||
        "https://api-broker4-v2.nelogica.com.br";
      const username =
        process.env.NELOGICA_USERNAME || "tradersHouse.hml@nelogica";
      const password =
        process.env.NELOGICA_PASSWORD || "OJOMy4miz63YLFwOM27ZGTO5n";

      // Cria a inst√¢ncia √∫nica
      this.instance = new NelogicaApiClient(apiUrl, username, password);

      // Faz o login imediatamente (pr√©-autentica√ß√£o)
      console.log("üîë [NelogicaSingleton] Realizando login inicial...");
      await this.instance.login();

      console.log(
        "‚úÖ [NelogicaSingleton] Inst√¢ncia criada e autenticada com sucesso"
      );
      console.log(
        "üí° [NelogicaSingleton] Pr√≥ximas chamadas reutilizar√£o esta inst√¢ncia"
      );

      return this.instance;
    } catch (error) {
      console.error("‚ùå [NelogicaSingleton] Erro ao criar inst√¢ncia:", error);

      // Reset em caso de erro
      this.instance = null;
      throw error;
    } finally {
      // Sempre libera o lock de inicializa√ß√£o
      this.isInitializing = false;
    }
  }

  /**
   * For√ßa uma nova inst√¢ncia (para casos de erro ou reset)
   * USE COM CUIDADO: s√≥ em casos de problemas de conectividade
   */
  public static async resetInstance(): Promise<NelogicaApiClient> {
    console.log("üîÑ [NelogicaSingleton] For√ßando reset da inst√¢ncia");

    this.instance = null;
    this.isInitializing = false;

    return await this.getInstance();
  }

  /**
   * Verifica se a inst√¢ncia atual est√° autenticada
   */
  public static isAuthenticated(): boolean {
    if (!this.instance) {
      return false;
    }

    // Verifica se o token ainda √© v√°lido (implementa√ß√£o depende do NelogicaApiClient)
    // Por enquanto, assume que se temos inst√¢ncia, est√° autenticada
    return true;
  }

  /**
   * Obt√©m informa√ß√µes de status para debugging
   */
  public static getStatus() {
    return {
      hasInstance: !!this.instance,
      isInitializing: this.isInitializing,
      isAuthenticated: this.isAuthenticated(),
      instanceCreatedAt: this.instance ? new Date().toISOString() : null,
    };
  }

  /**
   * M√©todo para uso em desenvolvimento - limpa tudo
   */
  public static clearForTesting(): void {
    console.log("üß™ [NelogicaSingleton] Limpando inst√¢ncia para testes");
    this.instance = null;
    this.isInitializing = false;
  }
}
